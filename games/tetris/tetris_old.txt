class TetrisShape{
	constructor(){
		this.H = 4;
		this.W = 4;
		this.col = 0;
		this.row = 0;

		this.index = this.random(tetrisShapes.length);
		this.subIndex = this.random(tetrisShapes[this.index].length);
		this.shape = tetrisShapes[this.index][this.subIndex];
		if (this.shape[0].indexOf('0') < 0) {
			this.row = -1;
		}
		this.index++;
	}
	random(limit){
		return Math.floor(Math.random() * limit)
	}
	join(){
		return this.shape.join`\n`;
	}
	move(direction){
		console.log('MOVE')
		
		switch(direction){
			case 'down': this.row++; break;
			case 'left': this.col++; break;
			case 'right': this.row--; break;
		}

	}
}

class Tetris{
	constructor(){
		this.H = 20;
		this.W = 10;
		this.cellSize = 20;
		this.grid = [];
		this.score = 0;
		this.THIS = this;

		this.background = document.getElementById('background');
		this.wrapper = document.getElementById('wrapper');
		this.tetris = document.getElementById('tetris');
		this.play = document.getElementById('play');
		this.game = document.getElementById('game');
		this.dimm = 'px';

		this.init();
	}
	init(){
		const cellSize = this.cellSize,
			dimm = this.dimm,
			game = this.game,
			wrapper = this.wrapper,
			background = this.background,
			play = this.play,
			H = this.H,
			W = this.W;

		game.style.height = H * (cellSize + 4) + dimm;
		game.style.top = 0 * cellSize + dimm;
		wrapper.style.top = 1 * cellSize + dimm;
		game.style.top = 1 * cellSize + dimm;

		//tetris.style.height = H+ * cellSize + dimm;
		//tetris.style.width = W * cellSize + dimm;

		//tetris.style.top = (1) * cellSize + dimm;


		background.style.height = (H + 2) * cellSize + dimm;
		background.style.width = (W + 2) * cellSize + dimm;


		play.style.height = (H) * cellSize + dimm;
		play.style.width = (W) * cellSize + dimm;

		play.style.top = (1) * cellSize + dimm;
		play.style.left = (1) * cellSize + dimm;

		for (let i=0; i<H; i++) {
			for (let j=0; j<W; j++) {
				this.appendChild(play,j,i, 'blank');
			}
		}		

		for (let i=0; i<W+2; i++) {
			for(let h of [0, H+1]) {
				this.appendChild(background,i,h,'brick');
			}
		}
		for (let i=1; i<H+1; i++) {
			for(let w of [0, W+1]) {
				this.appendChild(background,w,i,'brick');
			}
		}
	}
	appendChild(element,i,j, className){
		const cellDiv = document.createElement('DIV'),
			cellSize = this.cellSize,
			dimm = this.dimm;

		cellDiv.classList.add(className);
		cellDiv.style.top = j * cellSize + dimm;
		cellDiv.style.left = i * cellSize + dimm;
		cellDiv.style.width = cellSize + dimm;
		cellDiv.style.height = cellSize + dimm;
		element.appendChild(cellDiv);
	}

	getEmptyGrid(){
		return Array(this.H).fill(0).map(a=>Array(this.W).fill(' '));
	}
	render(){
		console.log('TETRIS RENDER');
		console.log('gridCopy');
		const gridCopy = this.grid.map(a=>a.slice());
		console.log(gridCopy.map((a,b)=>b+':'+a.join``).join`\n`);
		for (let i=0; i<this.currentShape.H; i++) {
			for (let j=0; j<this.currentShape.W; j++) {
				let row = i+this.currentShape.row;
				let col = j+this.currentShape.col;
				if(row < this.H && this.currentShape.shape[i][j] !== ' '){
					//gridCopy[i+this.currentShape.row][j+this.currentShape.col] = this.currentShape.shape[i][j];	
					
					console.log('replaceing ', row, col, 'b:', gridCopy[row][col], 'a:', this.currentShape.index);
					gridCopy[row][col] = this.currentShape.index;
				}
				
			}
		}
		console.log('this.grid');
		console.log(this.grid.map((a,b)=>b+':'+a.join``).join`\n`);
		for (let i=0; i<this.H; i++) {
			for (let j=0; j<this.W; j++) {
				if (this.grid[i][j] != gridCopy[i][j]) {
					this.grid[i][j] = gridCopy[i][j];
					let cellDiv = this.play.children[i*this.W + j];
					cellDiv.className = gridCopy[i][j] == ' ' ? 'blank' : 'cell'+gridCopy[i][j];
					console.log(i,j,cellDiv.className);
				}
			}
		}
	}
	renderReset(){
		for(let i=0, limit = this.play.children.length; i<limit; i++){
			if (this.play.children.className !== 'blank') {
				this.play.children.className = 'blank';
			}
		}
	}
	move(direction){
		let r = 0, c = 0;
		switch(direction){
			case 'down': r++;break;
			case 'left': c--;break;
			case 'right': c++;break;
			default:return;
		}
		if (this.canMove(r,c)) {
			//delete trail()
			console.log(this.currentShape.shape.join`\n`);
			for (let i=0; i<this.currentShape.H; i++) {
				for (let j=0; j<this.currentShape.W; j++) {
					let row = i + this.currentShape.row;
					let col = j + this.currentShape.col;

					if (row < this.H && col >= 0 && col < this.W) {
						if (this.currentShape.shape[i][j] !== ' ') {
							this.grid[row][col] = ' ';
						}
					}
				}
			}

			this.currentShape.row += r;
			this.currentShape.col += c;
			this.render();
		} else if (direction === 'down') {
			this.currentShape = this.nextShape;
			this.nextShape = new TetrisShape();
			//newInterval;
		}
	}

	
	canMove(r,c){
		if (r > 0) {
			for (let j=0; j<this.currentShape.W; j++) {
				for (let i=this.currentShape.H - 1; i>=0; i--) {
					console.log(i,j,this.currentShape.shape[i][j]);
					console.log(r + this.currentShape.row + i, j , r + this.currentShape.row + i < this.H && this.grid[r + this.currentShape.row + i][j]);
					if (r + this.currentShape.row + i < this.H && this.currentShape.shape[i][j] !== ' ') {
						if(this.grid[r + this.currentShape.row + i][j] !== ' '){
							return false;
						};
						break;
					}
				}
			}
			return true;
		} else if (c > 0) {

		} else if (c < 0) {

		}
		return false;
	}

	rotate(){

	}

	reset(){
		this.score = 0;
		this.grid = this.getEmptyGrid();
		this.renderReset();
		this.nextShape = null;
		this.currentShape = null;
		console.log('this.interval',this.interval);
		clearInterval(this.interval);
	}

	startGame(){
		this.reset();
		console.log('startGame');
		this.nextShape = new TetrisShape();
		//console.log(nextShape.join('\n'));
		this.currentShape = this.nextShape;
		const THIS = this;
		this.render();
		//currentShape.row = 0;
		//currentShape.col = 0;


		if(0)
		this.interval = setInterval(function() {
			//currentShape.move('down');
			//THIS.render(currentShape);
			THIS.move('down');
		},5000);
		


	}
}

function getKey(event){
	//console.log(event.key);
	//console.log(this);
	switch(event.key.toLowerCase()){
		case 's': tetris.move('down'); break;
		case 'a': tetris.move('left'); break;
		case 'd': tetris.move('right'); break;
		case 'w': tetris.rotate(); break;
		default: return;
	}
	tetris.render();
}

const tetris = new Tetris();

window.removeEventListener('keypress', getKey);
window.addEventListener('keypress', getKey);

tetris.startGame();